name: Confluent Cloud Flink Infrastructure

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      tf_action:
        description: "Terraform action (plan/apply/destroy)"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
          - destroy
      tf_vars_file:
        description: "Terraform variables file"
        required: false
        default: "terraform.tfvars"
        type: string

permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: "1.7.5"
  VAULT_ADDR: ${{ vars.VAULT_ADDR }}

jobs:
  # -----------------------------------------------------------------------------
  # Terraform Validation
  # -----------------------------------------------------------------------------
  validate:
    name: "Validate Terraform"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        run: terraform validate

  # -----------------------------------------------------------------------------
  # Terraform Plan
  # -----------------------------------------------------------------------------
  plan:
    name: "Plan Terraform"
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.tf_action == 'plan')
    env:
      TF_VAR_vault_addr: ${{ vars.VAULT_ADDR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Vault with OIDC
        uses: hashicorp/vault-action@v3
        with:
          method: jwt
          url: ${{ env.VAULT_ADDR }}
          path: ${{ vars.VAULT_JWT_PATH }}
          role: ${{ vars.VAULT_JWT_ROLE }}
        id: vault

      - name: Export VAULT_TOKEN
        run: echo "VAULT_TOKEN=${{ steps.vault.outputs.token }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Plan
        run: terraform plan -input=false -var-file=${{ inputs.tf_vars_file || 'terraform.tfvars' }}

  # -----------------------------------------------------------------------------
  # Terraform Apply/Destroy
  # -----------------------------------------------------------------------------
  apply:
    name: "Apply/Destroy Terraform"
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'workflow_dispatch' && (inputs.tf_action == 'apply' || inputs.tf_action == 'destroy')
    environment: production
    env:
      TF_VAR_vault_addr: ${{ vars.VAULT_ADDR }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Authenticate to Vault with OIDC
        uses: hashicorp/vault-action@v3
        with:
          method: jwt
          url: ${{ env.VAULT_ADDR }}
          path: ${{ vars.VAULT_JWT_PATH }}
          role: ${{ vars.VAULT_JWT_ROLE }}
        id: vault

      - name: Export VAULT_TOKEN
        run: echo "VAULT_TOKEN=${{ steps.vault.outputs.token }}" >> $GITHUB_ENV

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Apply
        if: inputs.tf_action == 'apply'
        run: terraform apply -input=false -auto-approve -var-file=${{ inputs.tf_vars_file || 'terraform.tfvars' }}

      - name: Terraform Destroy
        if: inputs.tf_action == 'destroy'
        run: terraform destroy -input=false -auto-approve -var-file=${{ inputs.tf_vars_file || 'terraform.tfvars' }}


